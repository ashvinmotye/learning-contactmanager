{"version":3,"sources":["Components/Contact.js","Components/Contacts.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Contact","state","showContactInfo","_this2","this","_this$props$contact","props","contact","name","email","phone","react_default","a","createElement","className","onClick","setState","Component","Contacts","contacts","id","Fragment","map","Components_Contact","key","Header","branding","href","defaultProps","App","Components_Header","Components_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LA8CeA,6MApCbC,MAAQ,CACNC,iBAAiB,2EAGV,IAAAC,EAAAC,KAAAC,EACwBD,KAAKE,MAAMC,QAAlCC,EADDH,EACCG,KAAMC,EADPJ,EACOI,MAAOC,EADdL,EACcK,MACbR,EAAoBE,KAAKH,MAAzBC,gBAER,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,UACGL,EAAM,IACPG,EAAAC,EAAAC,cAAA,KACEE,QAAS,WACPZ,EAAKa,SAAS,CACZd,iBAAkBC,EAAKF,MAAMC,mBAGjCY,UAAU,sBAGbZ,EACCS,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,UAAwCL,GACxCE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,UAAwCJ,IAExC,aAjCUO,aCqCPC,6MApCbjB,MAAQ,CACNkB,SAAU,CACR,CACEC,GAAI,EACJZ,KAAM,WACNC,MAAO,cACPC,MAAO,aAET,CACEU,GAAI,EACJZ,KAAM,aACNC,MAAO,eACPC,MAAO,aAET,CACEU,GAAI,EACJZ,KAAM,aACNC,MAAO,gBACPC,MAAO,uFAKJ,IACCS,EAAaf,KAAKH,MAAlBkB,SAER,OACER,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KACGF,EAASG,IAAI,SAAAf,GAAO,OACnBI,EAAAC,EAAAC,cAACU,EAAD,CAASC,IAAKjB,EAAQa,GAAIb,QAASA,cA9BtBU,aCAjBQ,EAAS,SAAAnB,GAAS,IACdoB,EAAapB,EAAboB,SACR,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGc,KAAK,IAAIb,UAAU,gBACnBY,GAEHf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGc,KAAK,IAAIb,UAAU,YAAtB,cAWdW,EAAOG,aAAe,CACpBF,SAAU,UAOGD,oBCfAI,MAXf,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAQJ,SAAS,oBACjBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkB,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98fd0b14.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Contact extends Component {\n  // static propTypes = {\n  //   name: PropTypes.string.isRequired,\n  //   email: PropTypes.string.isRequired,\n  //   phone: PropTypes.string.isRequired\n  // };\n\n  state = {\n    showContactInfo: false\n  };\n\n  render() {\n    const { name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n\n    return (\n      <div className=\"card card-body mb-3\">\n        <h4>\n          {name}{\" \"}\n          <i\n            onClick={() => {\n              this.setState({\n                showContactInfo: !this.state.showContactInfo\n              });\n            }}\n            className=\"fas fa-sort-down\"\n          />\n        </h4>\n        {showContactInfo ? (\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">Email: {email}</li>\n            <li className=\"list-group-item\">Phone: {phone}</li>\n          </ul>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired\n};\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport Contact from \"./Contact\";\n\nclass Contacts extends Component {\n  state = {\n    contacts: [\n      {\n        id: 1,\n        name: \"Jon Snow\",\n        email: \"jon@got.com\",\n        phone: \"123-45-67\"\n      },\n      {\n        id: 2,\n        name: \"Arya Stark\",\n        email: \"arya@got.com\",\n        phone: \"987-65-32\"\n      },\n      {\n        id: 3,\n        name: \"Night King\",\n        email: \"night@got.com\",\n        phone: \"555-55-55\"\n      }\n    ]\n  };\n\n  render() {\n    const { contacts } = this.state;\n\n    return (\n      <React.Fragment>\n        {contacts.map(contact => (\n          <Contact key={contact.id} contact={contact} />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = props => {\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <a href=\"/\" className=\"nav-link\">\n                Home\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nHeader.defaultProps = {\n  branding: \"My App\"\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from \"react\";\nimport Contacts from \"./Components/Contacts\";\nimport Header from \"./Components/Header\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header branding=\"Contact Manager\" />\n      <div className=\"container\">\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}